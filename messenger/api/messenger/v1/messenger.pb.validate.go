// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: messenger/v1/messenger.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SubscribeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeRequestMultiError, or nil if none found.
func (m *SubscribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChatId

	// no validation rules for UserId

	if len(errors) > 0 {
		return SubscribeRequestMultiError(errors)
	}

	return nil
}

// SubscribeRequestMultiError is an error wrapping multiple validation errors
// returned by SubscribeRequest.ValidateAll() if the designated constraints
// aren't met.
type SubscribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeRequestMultiError) AllErrors() []error { return m }

// SubscribeRequestValidationError is the validation error returned by
// SubscribeRequest.Validate if the designated constraints aren't met.
type SubscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeRequestValidationError) ErrorName() string { return "SubscribeRequestValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeRequestValidationError{}

// Validate checks the field values on SubscribeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubscribeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubscribeReplyMultiError,
// or nil if none found.
func (m *SubscribeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubscribeReplyValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubscribeReplyValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubscribeReplyValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscribeReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscribeReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscribeReplyValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubscribeReplyMultiError(errors)
	}

	return nil
}

// SubscribeReplyMultiError is an error wrapping multiple validation errors
// returned by SubscribeReply.ValidateAll() if the designated constraints
// aren't met.
type SubscribeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeReplyMultiError) AllErrors() []error { return m }

// SubscribeReplyValidationError is the validation error returned by
// SubscribeReply.Validate if the designated constraints aren't met.
type SubscribeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeReplyValidationError) ErrorName() string { return "SubscribeReplyValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeReplyValidationError{}

// Validate checks the field values on SendRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendRequestMultiError, or
// nil if none found.
func (m *SendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChatId

	// no validation rules for UserId

	if l := utf8.RuneCountInString(m.GetText()); l < 1 || l > 400 {
		err := SendRequestValidationError{
			field:  "Text",
			reason: "value length must be between 1 and 400 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendRequestMultiError(errors)
	}

	return nil
}

// SendRequestMultiError is an error wrapping multiple validation errors
// returned by SendRequest.ValidateAll() if the designated constraints aren't met.
type SendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendRequestMultiError) AllErrors() []error { return m }

// SendRequestValidationError is the validation error returned by
// SendRequest.Validate if the designated constraints aren't met.
type SendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendRequestValidationError) ErrorName() string { return "SendRequestValidationError" }

// Error satisfies the builtin error interface
func (e SendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendRequestValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Color

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on NewMessage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NewMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NewMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NewMessageMultiError, or
// nil if none found.
func (m *NewMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *NewMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NewMessageValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NewMessageValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NewMessageValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Text

	if len(errors) > 0 {
		return NewMessageMultiError(errors)
	}

	return nil
}

// NewMessageMultiError is an error wrapping multiple validation errors
// returned by NewMessage.ValidateAll() if the designated constraints aren't met.
type NewMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewMessageMultiError) AllErrors() []error { return m }

// NewMessageValidationError is the validation error returned by
// NewMessage.Validate if the designated constraints aren't met.
type NewMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewMessageValidationError) ErrorName() string { return "NewMessageValidationError" }

// Error satisfies the builtin error interface
func (e NewMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewMessageValidationError{}

// Validate checks the field values on SubscribeReply_ChatInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeReply_ChatInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeReply_ChatInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeReply_ChatInfoMultiError, or nil if none found.
func (m *SubscribeReply_ChatInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeReply_ChatInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubscribeReply_ChatInfoValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubscribeReply_ChatInfoValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubscribeReply_ChatInfoValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SubscribeReply_ChatInfoMultiError(errors)
	}

	return nil
}

// SubscribeReply_ChatInfoMultiError is an error wrapping multiple validation
// errors returned by SubscribeReply_ChatInfo.ValidateAll() if the designated
// constraints aren't met.
type SubscribeReply_ChatInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeReply_ChatInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeReply_ChatInfoMultiError) AllErrors() []error { return m }

// SubscribeReply_ChatInfoValidationError is the validation error returned by
// SubscribeReply_ChatInfo.Validate if the designated constraints aren't met.
type SubscribeReply_ChatInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeReply_ChatInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeReply_ChatInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeReply_ChatInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeReply_ChatInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeReply_ChatInfoValidationError) ErrorName() string {
	return "SubscribeReply_ChatInfoValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeReply_ChatInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeReply_ChatInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeReply_ChatInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeReply_ChatInfoValidationError{}
