// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/gusarow4321/TinyChat/auth/internal/biz"
	"github.com/gusarow4321/TinyChat/auth/internal/conf"
	"github.com/gusarow4321/TinyChat/auth/internal/data"
	"github.com/gusarow4321/TinyChat/auth/internal/pkg/hash"
	"github.com/gusarow4321/TinyChat/auth/internal/pkg/paseto"
	"github.com/gusarow4321/TinyChat/auth/internal/server"
	"github.com/gusarow4321/TinyChat/auth/internal/service"
	"github.com/gusarow4321/TinyChat/pkg/metrics"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, hasher *conf.Hasher, tokenMaker *conf.TokenMaker, vecs *metrics.Vecs, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewGreeterRepo(dataData, logger)
	passwordHasher := hash.NewPasswordHasher(hasher)
	pasetoTokenMaker, err := paseto.NewPasetoMaker(tokenMaker)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	authUsecase := biz.NewAuthUsecase(userRepo, logger, passwordHasher, pasetoTokenMaker)
	authService := service.NewGreeterService(authUsecase)
	grpcServer := server.NewGRPCServer(confServer, authService, vecs, logger)
	httpServer := server.NewHTTPServer(confServer)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
