// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gusarow4321/TinyChat/pkg/ent/predicate"
	"github.com/gusarow4321/TinyChat/pkg/ent/user"
	"github.com/gusarow4321/TinyChat/pkg/ent/usermetadata"
)

// UserMetadataUpdate is the builder for updating UserMetadata entities.
type UserMetadataUpdate struct {
	config
	hooks    []Hook
	mutation *UserMetadataMutation
}

// Where appends a list predicates to the UserMetadataUpdate builder.
func (umu *UserMetadataUpdate) Where(ps ...predicate.UserMetadata) *UserMetadataUpdate {
	umu.mutation.Where(ps...)
	return umu
}

// SetUserID sets the "userID" field.
func (umu *UserMetadataUpdate) SetUserID(i int64) *UserMetadataUpdate {
	umu.mutation.SetUserID(i)
	return umu
}

// SetName sets the "name" field.
func (umu *UserMetadataUpdate) SetName(s string) *UserMetadataUpdate {
	umu.mutation.SetName(s)
	return umu
}

// SetColor sets the "color" field.
func (umu *UserMetadataUpdate) SetColor(i int32) *UserMetadataUpdate {
	umu.mutation.ResetColor()
	umu.mutation.SetColor(i)
	return umu
}

// AddColor adds i to the "color" field.
func (umu *UserMetadataUpdate) AddColor(i int32) *UserMetadataUpdate {
	umu.mutation.AddColor(i)
	return umu
}

// SetUser sets the "user" edge to the User entity.
func (umu *UserMetadataUpdate) SetUser(u *User) *UserMetadataUpdate {
	return umu.SetUserID(u.ID)
}

// Mutation returns the UserMetadataMutation object of the builder.
func (umu *UserMetadataUpdate) Mutation() *UserMetadataMutation {
	return umu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (umu *UserMetadataUpdate) ClearUser() *UserMetadataUpdate {
	umu.mutation.ClearUser()
	return umu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (umu *UserMetadataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(umu.hooks) == 0 {
		if err = umu.check(); err != nil {
			return 0, err
		}
		affected, err = umu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMetadataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = umu.check(); err != nil {
				return 0, err
			}
			umu.mutation = mutation
			affected, err = umu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(umu.hooks) - 1; i >= 0; i-- {
			if umu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = umu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, umu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (umu *UserMetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := umu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (umu *UserMetadataUpdate) Exec(ctx context.Context) error {
	_, err := umu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umu *UserMetadataUpdate) ExecX(ctx context.Context) {
	if err := umu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umu *UserMetadataUpdate) check() error {
	if _, ok := umu.mutation.UserID(); umu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserMetadata.user"`)
	}
	return nil
}

func (umu *UserMetadataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usermetadata.Table,
			Columns: usermetadata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: usermetadata.FieldID,
			},
		},
	}
	if ps := umu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermetadata.FieldName,
		})
	}
	if value, ok := umu.mutation.Color(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: usermetadata.FieldColor,
		})
	}
	if value, ok := umu.mutation.AddedColor(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: usermetadata.FieldColor,
		})
	}
	if umu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usermetadata.UserTable,
			Columns: []string{usermetadata.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usermetadata.UserTable,
			Columns: []string{usermetadata.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, umu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserMetadataUpdateOne is the builder for updating a single UserMetadata entity.
type UserMetadataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMetadataMutation
}

// SetUserID sets the "userID" field.
func (umuo *UserMetadataUpdateOne) SetUserID(i int64) *UserMetadataUpdateOne {
	umuo.mutation.SetUserID(i)
	return umuo
}

// SetName sets the "name" field.
func (umuo *UserMetadataUpdateOne) SetName(s string) *UserMetadataUpdateOne {
	umuo.mutation.SetName(s)
	return umuo
}

// SetColor sets the "color" field.
func (umuo *UserMetadataUpdateOne) SetColor(i int32) *UserMetadataUpdateOne {
	umuo.mutation.ResetColor()
	umuo.mutation.SetColor(i)
	return umuo
}

// AddColor adds i to the "color" field.
func (umuo *UserMetadataUpdateOne) AddColor(i int32) *UserMetadataUpdateOne {
	umuo.mutation.AddColor(i)
	return umuo
}

// SetUser sets the "user" edge to the User entity.
func (umuo *UserMetadataUpdateOne) SetUser(u *User) *UserMetadataUpdateOne {
	return umuo.SetUserID(u.ID)
}

// Mutation returns the UserMetadataMutation object of the builder.
func (umuo *UserMetadataUpdateOne) Mutation() *UserMetadataMutation {
	return umuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (umuo *UserMetadataUpdateOne) ClearUser() *UserMetadataUpdateOne {
	umuo.mutation.ClearUser()
	return umuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (umuo *UserMetadataUpdateOne) Select(field string, fields ...string) *UserMetadataUpdateOne {
	umuo.fields = append([]string{field}, fields...)
	return umuo
}

// Save executes the query and returns the updated UserMetadata entity.
func (umuo *UserMetadataUpdateOne) Save(ctx context.Context) (*UserMetadata, error) {
	var (
		err  error
		node *UserMetadata
	)
	if len(umuo.hooks) == 0 {
		if err = umuo.check(); err != nil {
			return nil, err
		}
		node, err = umuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMetadataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = umuo.check(); err != nil {
				return nil, err
			}
			umuo.mutation = mutation
			node, err = umuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(umuo.hooks) - 1; i >= 0; i-- {
			if umuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = umuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, umuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (umuo *UserMetadataUpdateOne) SaveX(ctx context.Context) *UserMetadata {
	node, err := umuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (umuo *UserMetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := umuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umuo *UserMetadataUpdateOne) ExecX(ctx context.Context) {
	if err := umuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umuo *UserMetadataUpdateOne) check() error {
	if _, ok := umuo.mutation.UserID(); umuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserMetadata.user"`)
	}
	return nil
}

func (umuo *UserMetadataUpdateOne) sqlSave(ctx context.Context) (_node *UserMetadata, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usermetadata.Table,
			Columns: usermetadata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: usermetadata.FieldID,
			},
		},
	}
	id, ok := umuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserMetadata.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := umuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usermetadata.FieldID)
		for _, f := range fields {
			if !usermetadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usermetadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := umuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermetadata.FieldName,
		})
	}
	if value, ok := umuo.mutation.Color(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: usermetadata.FieldColor,
		})
	}
	if value, ok := umuo.mutation.AddedColor(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: usermetadata.FieldColor,
		})
	}
	if umuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usermetadata.UserTable,
			Columns: []string{usermetadata.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usermetadata.UserTable,
			Columns: []string{usermetadata.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserMetadata{config: umuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, umuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
